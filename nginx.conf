#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

error_log /dev/stdout info;
error_log /dev/stderr error;
error_log /dev/stdout warn;

#pid        logs/nginx.pid;

env SURREALDB_DATABASE_USER;
env SURREALDB_DATABASE_PASSWORD;
env SURREALDB_DB;
env SURREALDB_NS;
env FRONTEND_URL;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/json;

    # Required by docker to resolve hostnames
    resolver 127.0.0.11 ipv6=off;

    lua_package_path "/etc/nginx/conf.d/lua/?.lua;;";


    upstream surrealdb {
        server surrealdb:8000;
    }


    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
      listen 8080;

      # Disable lua_code_cache to avoid restarting nginx (only for development)
      # This must me turned to `on` in production
      lua_code_cache off;

      error_page 401 /401;

      location /401 {
        return 401 '{"code": 401, "message": "Unauthorized"}';
      }

      location ~ ^/oauth/(.+)/callback$ {
        content_by_lua_file '/etc/nginx/conf.d/lua/oauth/callback.lua';
      }

      location ~ ^/oauth/([^/]+)$ {
        content_by_lua_file '/etc/nginx/conf.d/lua/oauth/authorize.lua';
      }

      location = /me {
        content_by_lua_file '/etc/nginx/conf.d/lua/me.lua';
      }

      location ~ ^/auth/([^/]+)$ {
        content_by_lua_file '/etc/nginx/conf.d/lua/auth.lua';
      }

      location /surrealdb/version {
        default_type 'text/plain';
        # default_type 'application/json';

        content_by_lua_block {
         local surrealdb = require("surrealdb");
         local err, response = pcall(surrealdb.getVersion);

          if err then
            ngx.status = ngx.HTTP_BAD_REQUEST
            ngx.say(response)
            ngx.exit((ngx.HTTP_BAD_REQUEST))
          else
            ngx.say(response);
            ngx.exit(ngx.OK)
          end

        }
      }

      location /ping {
        default_type 'text/plain';

        content_by_lua_block {
          ngx.say('pong')
        }
      }

      location / {
        content_by_lua_block {
          local cjson = require("cjson");
          local data = {
            greeting = "OpenResty / Backend Server is running ðŸš€"
          }

          ngx.header.content_type = 'text/application/json; charset=utf-8';

          ngx.say(cjson.encode(data));

          ngx.exit(ngx.OK)
        }
      }

    # Don't reveal OpenResty version to clients.
    # server_tokens off;
  }

}
